#include <SoftwareSerial.h>
#include "Wire.h"
#define RxD 2
#define TxD 3
#define LED 13
#define DS1307_I2C_ADDRESS 0x68
SoftwareSerial mySerial(RxD,TxD); // RX, TX
byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;
// Convert normal decimal numbers to binary coded decimal
float interval_status = 4;
unsigned long preminute = 0; 

// ---Sensor---
int val = 0; //value for storing moisture value 
int soilPin = A1;//Declare a variable for the soil moisture sensor 
int soilPower = 7;//Variable for Soil moisture Power
int DHpin = 12; // input/output pin
byte dat[5]; 

// ------------


String SerialGET = "";
String r4mac;
unsigned long previousMillis=0;
float interval_sensor=80000;
unsigned long currentMillis=0;

byte decToBcd(byte val)
{
return ( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val)
{
return ( (val/16*10) + (val%16) );
}
// Function to set the currnt time, change the second&minute&hour to the right time
void setDateDs1307()
{
second = 00;
minute = 00;
hour = 00;
dayOfWeek = 2;
dayOfMonth =2;
month =8;
year= 18;
Wire.beginTransmission(DS1307_I2C_ADDRESS);
Wire.write(decToBcd(0));
Wire.write(decToBcd(second)); // 0 to bit 7 starts the clock
Wire.write(decToBcd(minute));
Wire.write(decToBcd(hour)); // If you want 12 hour am/pm you need to set
// bit 6 (also need to change readDateDs1307)
Wire.write(decToBcd(dayOfWeek));
Wire.write(decToBcd(dayOfMonth));
Wire.write(decToBcd(month));
Wire.write(decToBcd(year));
Wire.endTransmission();
}
// Function to gets the date and time from the ds1307 and prints result
void getDateDs1307()
{
// Reset the register pointer
Wire.beginTransmission(DS1307_I2C_ADDRESS);
Wire.write(decToBcd(0));
Wire.endTransmission();
Wire.requestFrom(DS1307_I2C_ADDRESS, 7);
second = bcdToDec(Wire.read() & 0x7f);
minute = bcdToDec(Wire.read());
hour = bcdToDec(Wire.read() & 0x3f); // Need to change this if 12 hour am/pm
dayOfWeek = bcdToDec(Wire.read());
dayOfMonth = bcdToDec(Wire.read());
month = bcdToDec(Wire.read());
year = bcdToDec(Wire.read());
//Serial.print("Day of week:");
}

void setup() {
    Wire.begin();
    Serial.begin(9600);
    pinMode(LED, OUTPUT);
    pinMode(RxD, INPUT);
    pinMode(TxD, OUTPUT);
    pinMode(DHpin, OUTPUT);
    mySerial.begin(9600);
    r4mac = String();
    pinMode(soilPower, OUTPUT);//Set D7 as an OUTPUT
    digitalWrite(soilPower, LOW);//Set to LOW so no power is flowing through the sensor
    digitalWrite(LED, LOW);
    setDateDs1307();
}
 
void loop() {
  unsigned long currentMillis = millis();
  getDateDs1307();
  if((unsigned long)(currentMillis - previousMillis) >= interval_sensor) {             
              int soil = readSoil();
              soil = soil/10;
              Serial.print("Soil moisture = ");
              Serial.println(soil);
              String convert = String(soil);
              int count_convert = convert.length();
              
              int temp = Thermister(analogRead(0));
              Serial.print("Temperature = ");
              Serial.print(temp);
              Serial.print("c");
              String convert2 = String(temp);
              int count_convert2 = convert2.length();

              /*start_test();
              Serial.print("Humdity = ");
              Serial.print(dat[0]);
              Serial.println("%");
              String convert3 = String(dat[0]);
              int count_convert3 = convert3.length();*/

              mySerial.print(".4");
              mySerial.print(count_convert);
              mySerial.print(soil);
              mySerial.print(count_convert2);
              mySerial.print(temp);
              /*mySerial.print(count_convert3);
              mySerial.print(dat[0]);*/
              mySerial.print('\n');
              previousMillis = currentMillis;

              Serial.print(" ");
              Serial.print(hour, DEC);
              Serial.print(":");
              Serial.print(minute, DEC);
              Serial.print(":");
              Serial.print(second, DEC);
              Serial.print(" ");
              Serial.print(dayOfMonth, DEC);
              Serial.print("/");
              Serial.print(month, DEC);
              Serial.print("/");
              Serial.print(year,DEC);
              Serial.print(" ");
              Serial.println();
              
              }
     if((minute - preminute) >= interval_status){
      digitalWrite(LED, LOW);
      Serial.print("Disconnect Trun Of LED.");
      preminute = minute;

              Serial.print(" ");
              Serial.print(hour, DEC);
              Serial.print(":");
              Serial.print(minute, DEC);
              Serial.print(":");
              Serial.print(second, DEC);
              Serial.print(" ");
              Serial.print(dayOfMonth, DEC);
              Serial.print("/");
              Serial.print(month, DEC);
              Serial.print("/");
              Serial.print(year,DEC);
              Serial.print(" ");
              Serial.println();
      }
     if(mySerial.available()) {                   //ฝั่งรับ    
        char incoming  = mySerial.read();
        SerialGET += incoming;
        if(incoming == '\n'){
          SerialGET.trim();
            if(SerialGET.substring(0,1) == "3"){
              if(SerialGET.substring(3,4) == "1"){
                digitalWrite(LED, HIGH);
                Serial.print("Trun On LED");
                }
              else if(SerialGET.substring(3,4) == "0"){
                digitalWrite(LED, LOW);
                Serial.print("Trun Off LED");
              }

              Serial.print(" ");
              Serial.print(hour, DEC);
              Serial.print(":");
              Serial.print(minute, DEC);
              Serial.print(":");
              Serial.print(second, DEC);
              Serial.print(" ");
              Serial.print(dayOfMonth, DEC);
              Serial.print("/");
              Serial.print(month, DEC);
              Serial.print("/");
              Serial.print(year,DEC);
              Serial.print(" ");
              Serial.println();
              }
     SerialGET = "";
        }
        }
}

int readSoil()
{
    digitalWrite(soilPower, HIGH);//turn D7 "On"
    delay(10);//wait 10 milliseconds 
    val = analogRead(soilPin);//Read the SIG value form sensor 
    digitalWrite(soilPower, LOW);//turn D7 "Off"
    return val;//send current moisture value
}

double Thermister(int RawADC) {
  double Temp;
  Temp = log(((10240000/RawADC) - 10000));
  Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp ))* Temp );
  Temp = Temp - 273.15; // Convert Kelvin to Celcius
  return Temp;
}

byte read_data()
{
  byte i = 0;
  byte result = 0;
  for (i = 0; i < 8; i++) {
      while (digitalRead(DHpin) == LOW); // wait 50us
      delayMicroseconds(30); //The duration of the high level is judged to determine whether the data is '0' or '1'
      if (digitalRead(DHpin) == HIGH)
        result |= (1 << (8 - i)); //High in the former, low in the post
    while (digitalRead(DHpin) == HIGH); //Data '1', waiting for the next bit of reception
    }
  return result;
}

void start_test()
{
  digitalWrite(DHpin, LOW); //Pull down the bus to send the start signal
  delay(30); //The delay is greater than 18 ms so that DHT 11 can detect the start signal
  digitalWrite(DHpin, HIGH);
  delayMicroseconds(40); //Wait for DHT11 to respond
  pinMode(DHpin, INPUT);
  while(digitalRead(DHpin) == HIGH);
  delayMicroseconds(80); //The DHT11 responds by pulling the bus low for 80us;
  
  if(digitalRead(DHpin) == LOW)
    delayMicroseconds(80); //DHT11 pulled up after the bus 80us to start sending data;
  for(int i = 0; i < 5; i++) //Receiving temperature and humidity data, check bits are not considered;
    dat[i] = read_data();
  pinMode(DHpin, OUTPUT);
  digitalWrite(DHpin, HIGH); //After the completion of a release of data bus, waiting for the host to start the next signal
}
